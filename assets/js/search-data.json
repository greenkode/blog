{
  
    
        "post0": {
            "title": "Representing Money in your API response",
            "content": "Representing Money in your API response . Representing monetary values in an API might seem straightforward at first, however on second thought, there are some subtle complications that can arise if not given enough thought. . The Problem. . I was trawling through one of my favourite crypto discord channels when I came across an interesting conversation. . . This got me thinking. In principle, once an API is published, it can’t really be changed. You can always publish a new version but then, now you have to manage multiple versions of an API. . So you have two options. Try to think of all the possible use cases (hint. impossible). Or you could build your API in a way that allows it to be flexible and extensible with backwards compatibility. It turns out, monetary values are a tricky beast. There also doesn’t seem to be any standard way to represent it. So we’ll try and see a few ways of tackling the problem. . As an API developer, You want to make consuming your API as convenient as possible however you need to know where to draw the line, and sometimes the borders between client/server responsibilities are not very clear. . The wrong way . { &quot;accountBalance&quot; : &quot;$100,000.00&quot; } . The above seems convenient enough, the client has only to pull the value pre-formatted and display it on screen. Client developers would love it. Except your Dutch clients. This is because in some parts of the world, The Netherlands included, monetary values use the dot format. i.e. (.) to represent thousand separators and (,) to represent decimal. . Comma format : 2,000,000.00 | Dot format : 2.000.000,00 | . They would literally have to write code to clear your formatting before formatting it in a manner that is useful to them. . . A good rule of thumb is... _If the value is to be displayed to the user in some sort of UI. It&#39;s not your problem, send the data in as basic a format as possible. Or use established standards where necessary._ { &quot;accountBalance&quot; : &quot;1000000&quot;, &quot;symbol&quot;: &quot;$&quot;, &quot;code&quot;: &quot;USD&quot; } . That looks nice for whole numbers, but what about floating points. The use case described in the image above indicated that they must have been dealing with some very small numerical values. . I took a look at the API myself. . GET https://ethgasstation.info/api/ethgasAPI.json? { &quot;fast&quot;: 2340, &quot;fastest&quot;: 2340, &quot;safeLow&quot;: 1170, &quot;average&quot;: 1360, &quot;block_time&quot;: 13.8, &quot;blockNum&quot;: 11850976, &quot;speed&quot;: 0.9991300618896608, &quot;safeLowWait&quot;: 13.1, &quot;avgWait&quot;: 1.5, &quot;fastWait&quot;: 0.5, &quot;fastestWait&quot;: 0.5, &quot;gasPriceRange&quot;: { &quot;4&quot;: 230, &quot;6&quot;: 230, &quot;8&quot;: 230, &quot;10&quot;: 230, ... &quot;820&quot;: 230, &quot;840&quot;: 29.8, &quot;860&quot;: 29.8, ... &quot;1460&quot;: 1.3 } } . As expected I saw another warning. . It began to seem to me that the reasons for the design of the APi that way wasn’t a client consideration, but something to do with the API backend implementation. . The most obvious question I had was, Why not just do the division yourself while returning the value??? . Should the client care if you return &quot;4 : 23.0&quot; or &quot;4 : 230&quot; with the added caveat that the clients should divide by 10. Also what the hell is Gwei? . About units . So it turns out a Gwei is the smallest unit of ETH (essentially the ETH equivalent of a satoshi) Due to the nature of cryptocurrencies, you an send really tiny amounts of money over the wire, and while the examples above assume standard whole numbers, it doesn’t deal with fractions. . So how do we represent the currency values in a way that still allows us a bit of flexibility to modify the api implementation, if things change in the future. . Here’s an attempt. . { &quot;accountBalance&quot; : &quot;230&quot;, &quot;code&quot;: &quot;ETH&quot;, &quot;unit&quot;: &quot;Gwei&quot;, &quot;multiplicationFactor&quot; : 0.1 } . So Here I’ve added a field multiplicationFactor (I couldn’t be arsed to think of a better name TBH). All it really does is provide a value which you can multiply by to produce base units, if needed. I’ve also provided the unit field as well for information purposes. The idea being that the final value displayed in base units is the multiplicationFactor * accountBalance . So how can we represent 230.34 using this format? . { &quot;accountBalance&quot; : &quot;230.34&quot;, &quot;code&quot;: &quot;USD&quot;, &quot;unit&quot;: &quot;BASE&quot;, &quot;multiplicationFactor&quot; : 1 } . It outputs 230.34 . This monetary value can also be represented as. . { &quot;accountBalance&quot; : &quot;23034&quot;, &quot;code&quot;: &quot;USD&quot;, &quot;unit&quot;: &quot;MINOR&quot;, &quot;multiplicationFactor&quot; : 0.01 } . Same output representation! . Of course, you would want to define the units up front, so you don’t surprise your clients, however the unit field is purely informational, the core logic only depends on the two fields described above. . The question of which units to use is one of those that draws a meh response. The case being that there isn’t really a right, or wrong way to do it. Looking at this question on StackOverflow yields insight into how different systems implement it. . Of course, there are advantages and disadvantages to this approach. Feel free to leave your feedback below. .",
            "url": "https://greenkode.io/markdown/2021/02/13/representing-money-in-your-api.html",
            "relUrl": "/markdown/2021/02/13/representing-money-in-your-api.html",
            "date": " • Feb 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://greenkode.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://greenkode.io/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". .",
          "url": "https://greenkode.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "OOP",
          "content": "OOP is my bread and butter. .",
          "url": "https://greenkode.io/oop/",
          "relUrl": "/oop/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://greenkode.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}